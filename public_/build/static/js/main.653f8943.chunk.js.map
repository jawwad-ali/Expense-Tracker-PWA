{"version":3,"sources":["components/Header.js","Context/AppReducer.js","Context/GlobalState.js","components/Balance.js","components/IncomeExpense.js","components/Transaction.js","components/TransactionList.js","components/AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","action","type","transactions","filter","transaction","id","payload","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","Balance","total","useContext","map","amount","reduce","acc","item","toFixed","className","IncomeExpense","amounts","income","expense","Transaction","sign","text","Math","abs","onClick","TransactionList","key","AddTransaction","useState","setText","setAmount","onSubmit","event","preventDefault","newTransaction","floor","random","htmlFor","onChange","e","target","placeholder","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.653f8943.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div>\r\n            <h2>\r\n                Expense Tracker\r\n            </h2>            \r\n            <small>by &copy; Ali Jawwad</small>\r\n        </div>\r\n    )\r\n}\r\n","export default (state , action)=>{\r\n    switch(action.type){\r\n        \r\n        case \"DELETE_TRANSACTION\":\r\n            return{\r\n                ...state,\r\n                transactions : state.transactions.filter( transaction =>transaction.id !== action.payload )\r\n            }\r\n        case \"ADD_TRANSACTION\":\r\n            return{\r\n                ...state,\r\n                transactions: [action.payload , ...state.transactions]\r\n            }   \r\n        default:\r\n            return state\r\n    }\r\n}","import React , {createContext , useReducer} from \"react\"\r\nimport AppReducer from './AppReducer'\r\n\r\nconst initialState = {\r\n    transactions :  []\r\n}\r\n\r\n// Create COntext\r\nexport const GlobalContext = createContext(initialState)\r\n\r\nexport const GlobalProvider = ({children}) => {\r\n    const [state , dispatch] = useReducer(AppReducer , initialState)\r\n\r\n    // Actions making call to reducers\r\n    function deleteTransaction(id){\r\n        dispatch({\r\n            type : 'DELETE_TRANSACTION',\r\n            payload : id\r\n        })\r\n    }\r\n\r\n    function addTransaction(transaction){\r\n        dispatch({\r\n            type : 'ADD_TRANSACTION',\r\n            payload : transaction\r\n        })\r\n    }\r\n\r\n    return(\r\n        <GlobalContext.Provider value={{\r\n            transactions: state.transactions,\r\n            deleteTransaction,\r\n            addTransaction\r\n        }}>\r\n            {children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}","import React , {useContext} from 'react'\r\nimport {GlobalContext} from '../Context/GlobalState'\r\n\r\nexport default function Balance() {\r\n    const {transactions } = useContext(GlobalContext)\r\n    \r\n    const amounts = transactions.map( transaction =>transaction.amount )\r\n    const total = amounts.reduce( (acc , item) => (acc += item),0 ).toFixed(2)\r\n\r\n    return (\r\n        <div>\r\n            <h4>Your Balance</h4>\r\n            <h1 className=\"total\">$ {total} </h1>\r\n        </div>\r\n    )\r\n}\r\n","import React , {useContext} from 'react'\r\nimport {GlobalContext} from '../Context/GlobalState'\r\n\r\nexport default function IncomeExpense() {\r\n    const {transactions } = useContext(GlobalContext)\r\n    \r\n    const amounts = transactions.map(transaction => transaction.amount);\r\n\r\n    const income = amounts\r\n      .filter(item => item > 0)\r\n      .reduce((acc, item) => (acc += item), 0)\r\n      .toFixed(2);\r\n  \r\n    const expense = (\r\n      amounts.filter(item => item < 0).reduce((acc, item) => (acc += item), 0) *\r\n      -1\r\n    ).toFixed(2);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"inc-exp-container\">\r\n                <div>\r\n                    <h4>Income</h4>\r\n                    <p  className=\"money plus\">{income}</p>\r\n                </div>\r\n                <div>\r\n                    <h4>Expense</h4>\r\n                    <p  className=\"money minus\">{expense}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React , {useContext} from 'react'\r\nimport {GlobalContext} from '../Context/GlobalState'\r\n\r\nexport default function Transaction({transaction}) {\r\n    const {deleteTransaction} = useContext(GlobalContext)\r\n\r\n    const sign = transaction.amount < 0 ? \"-\" : \"+\"\r\n    \r\n    return (\r\n        <div>\r\n            <li className= {transaction.amount < 0 ? \"minus\" : \"plus\"} >\r\n                {transaction.text} \r\n                <span> {sign} $ {Math.abs(transaction.amount)}</span>\r\n                <button onClick={ ()=> deleteTransaction(transaction.id) } className=\"delete-btn\">x</button>\r\n            </li>\r\n        </div>\r\n    )\r\n}\r\n","import React , {useContext} from 'react'\r\nimport {GlobalContext} from '../Context/GlobalState'\r\nimport Transaction from './Transaction'\r\n\r\nexport default function TransactionList() {\r\n\r\n    const {transactions } = useContext(GlobalContext)\r\n\r\n    return (\r\n        <div>\r\n            <h3>History</h3>\r\n            <ul id=\"list\" className=\"list\">\r\n                {\r\n                    transactions.map(transaction => (  <Transaction key={transaction.id} \r\n                        transaction={transaction} /> ))\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useContext } from 'react'\r\nimport { GlobalContext } from '../Context/GlobalState'\r\n\r\nexport default function  AddTransaction ()  {\r\n    const [text, setText] = useState(\"\")\r\n    const [amount, setAmount] = useState(0)\r\n\r\n    const { addTransaction } = useContext(GlobalContext);\r\n\r\n    const onSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        const newTransaction = {\r\n            id: Math.floor(Math.random() * 100000000),\r\n            text,\r\n            amount: +amount,\r\n        }\r\n        addTransaction(newTransaction);\r\n        setText(\"\")\r\n        setAmount(0)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>Add new transaction</h3>\r\n            <form onSubmit={onSubmit} id=\"form\">\r\n                <div className=\"form-control\">\r\n                    <label htmlFor=\"text\"> <strong> Enter Text</strong></label>\r\n                    <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)}\r\n                        placeholder=\"Enter text...\" />\r\n                </div>\r\n\r\n                <div className=\"form-control\">\r\n                    <label htmlFor=\"amount\"\r\n                    > <strong> Enter Amount</strong> <br />\r\n                (negative - expense, positive - income)</label\r\n                    >\r\n                    <input type=\"number\" value={amount} onChange={(e) => setAmount(e.target.value)} placeholder=\"Enter amount...\" />\r\n                </div>\r\n\r\n                <button className=\"btn\">Add transaction</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header'\r\nimport Balance from './components/Balance'\r\nimport IncomeExpense from './components/IncomeExpense'\r\nimport TransactionList from './components/TransactionList'\r\nimport AddTransaction from './components/AddTransaction'\r\nimport {GlobalProvider} from './Context/GlobalState'\r\n\r\nfunction App() {\r\n\r\n  return (\r\n \r\n    <GlobalProvider >\r\n      <div className=\"container\">\r\n      <Header />\r\n        <Balance />\r\n        <IncomeExpense />\r\n        <TransactionList />\r\n        <AddTransaction />\r\n      </div>\r\n    </GlobalProvider >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.register();"],"sourceRoot":""}